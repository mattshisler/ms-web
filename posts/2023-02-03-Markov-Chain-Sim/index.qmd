---
title: "ST746 - Markov Chain Sim"
description: ""
author:
  - name: Matthew Shisler
    affiliation: North Carloina State University - Department of Statistics
    affiliation-url: https://statistics.sciences.ncsu.edu/ 
categories: [Stochastic Processes] # self-defined categories
draft: false 
format:
  html: 
    code-fold: true
execute: 
  cache: false
---


```{r}
#| label: load-packages
#| output: false
#| code-summary: "Code: Load the packages"

library(tidyverse)
library(igraph)
library(viridis)
```

We want to simulate a simple Markov Chain. The state space is

$$
S = \{A,B,C\}
$$

The transition matrix is

$$
\begin{pmatrix}
. & 0.5 & 0.5\\
0.75 & . & 0.25\\
0.75 & . & 0.25
\end{pmatrix}
$$

Let $X_n$ be the state of the chain at time $n$. Starting with $X_0 = A$, we will simulate the chain out to $X_6$.

Let $N_B$ be the number of visits to state $B$ and $N_C$ be the number of visits to state $C$. We would like to approximate the probability of visiting states $B$ and $C$ an equal number of times in the first six steps.

With a little work, we can show that it is not possible for $N_B = N_C = 0, 1$. Also, $P(N_B = 3, N_B = 3 | X_0 = A) = P(X_1 \neq A, \dots, X_6 \neq A| X_0 = A)$. The tricky calculation is $P(N_B = 2, N_B = 2 | X_0 = A)$ and that is the motivation for this small simulation.

```{r}
#| code-summary: "Code: define the simulation function" 

mc.sim <- function(P, init.state = 1, num.iters = 50){
  
  num.states <- nrow(P)
  states     <- numeric(num.iters + 1)
  states[1]  <- 1
  
  for (n in 2:(num.iters+1)){
    
    p <- P[states[n-1],]
    states[n] <- which(rmultinom(1,1,p) == 1)
    
  }
  
  return(chain = states[2:(num.iters+1)])
  
}

```

Test the simulation. We should not see any runs of 2 since there is no probability to stay in the same state. We should not see the first state being 1, since we know we must immediately leave state $A$.

```{r}

P <- matrix(c(0, 0.5, 0.5,
              0.75,0,0.25,
              0.75,0.25,0), byrow = T, nrow = 3)

mc.sim(P, init.state = 1, num.iters = 6)


```

This looks good. We want to run this simulation many times for the first six steps of the chain.

```{r}
num.reps <- 10

results <- matrix(unlist(lapply(1:num.reps,  
                                function(x) mc.sim(P, 
                                                   init.state = x, 
                                                   num.iters = 6) )), 
                  byrow = T, 
                  nrow = num.reps)
```

Here are the results for 10 replicates:

```{r}
results
```

Next, we want to count each time a row has an equal number of $2$s and $3$s corresponding to the number of times we visit states $A$ and $B$ an equal number of times.

```{r}
#| code-summary: "Code: a function to check for equal visits" 


check.equal.visit <- function(x, num.times = 2){
  
  return(length(which(x==2)) == num.times & length(which(x==3)) == num.times)

}

check.equal.visit(results[3,], num.times = 2)


```

Apply this function to the rows of the results matrix.

```{r}

equal2 <- apply(results, MARGIN = 1, function(x) check.equal.visit(x, num.times = 2))

```

Sum this vector to get the number of times the equal visits occured, the dived by the number of simulation replicates to estimate the probability of an equal number of visits.

```{r}
sum(equal2)/num.reps
```

Repeat the above, but for a large number of replicates.

```{r}
num.reps <- 10000

results <- matrix(unlist(lapply(1:num.reps,  
                                function(x) mc.sim(P, 
                                                   init.state = x, 
                                                   num.iters = 6) )), 
                  byrow = T, 
                  nrow = num.reps)

equal0 <- apply(results, MARGIN = 1, function(x) check.equal.visit(x, num.times = 0))
equal1 <- apply(results, MARGIN = 1, function(x) check.equal.visit(x, num.times = 1))
equal2 <- apply(results, MARGIN = 1, function(x) check.equal.visit(x, num.times = 2))
equal3 <- apply(results, MARGIN = 1, function(x) check.equal.visit(x, num.times = 3))

sum(equal0)/num.reps
sum(equal1)/num.reps
sum(equal2)/num.reps
sum(equal3)/num.reps
```

This agrees with our estimates, but this is not best way to run the simulation because
I don't need to store the results of each run every time. Let's write something a little more compact.

Each time I simulate a replicate I will immediately check for equal visits. Then
I can throw away the old results instead of storing them.

```{r}
#| cache: true

num.reps <- 1000000

num.equal0 <- 0
num.equal1 <- 0
num.equal2 <- 0
num.equal3 <- 0

for (i in 1:num.reps){
  
  results <- mc.sim(P, init.state = 1, num.iters = 6)
  
  if(check.equal.visit(results, num.times = 0)){
    num.equal0 = num.equal0 + 1 
  }
  
  if(check.equal.visit(results, num.times = 1)){
    num.equal1 = num.equal1 + 1 
  }
  
  if(check.equal.visit(results, num.times = 2)){
    num.equal2 = num.equal2 + 1 
  }
  
  if(check.equal.visit(results, num.times = 3)){
    num.equal3 = num.equal3 + 1 
  }
  
  
}



```